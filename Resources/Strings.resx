<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Appearance" xml:space="preserve">
    <value>Appearance</value>
  </data>
  <data name="btnCustomizeThisContentType" xml:space="preserve">
    <value>&amp;Customize this content type</value>
  </data>
  <data name="btnThemeDelete" xml:space="preserve">
    <value>&amp;Delete</value>
  </data>
  <data name="DefaultThemeName" xml:space="preserve">
    <value>(Default)</value>
  </data>
  <data name="grpLineMode" xml:space="preserve">
    <value>Display Mode</value>
  </data>
  <data name="grpLineStyle" xml:space="preserve">
    <value>Line Style</value>
  </data>
  <data name="IndentGuidePackage" xml:space="preserve">
    <value>Indent Guides Package</value>
  </data>
  <data name="lblContentType" xml:space="preserve">
    <value>Content Type:</value>
  </data>
  <data name="LineColorDescription" xml:space="preserve">
    <value>The color of the guide lines</value>
  </data>
  <data name="LineColorDisplayName" xml:space="preserve">
    <value>Line Color</value>
  </data>
  <data name="LineStyleDescription" xml:space="preserve">
    <value>The style of guides to display.</value>
  </data>
  <data name="LineStyleDisplayName" xml:space="preserve">
    <value>Line Style</value>
  </data>
  <data name="lineTextPreview" xml:space="preserve">
    <value>try\n{\n    if (a == 0)\n    {\n        return foo(a,\n                   10);\n\n    }\n    else\n    {\n        while(a &gt; 0)\n            a -= 1;\n\n    }\n}</value>
  </data>
  <data name="ContentTypeDescription" xml:space="preserve">
    <value>The content type these settings apply to</value>
  </data>
  <data name="ContentTypeDisplayName" xml:space="preserve">
    <value>Content Type</value>
  </data>
  <data name="UnknownContentType" xml:space="preserve">
    <value>not available.</value>
  </data>
  <data name="VisibilityDescription" xml:space="preserve">
    <value>Show indentation guides in all text editors</value>
  </data>
  <data name="VisibleAtTextEndDescription" xml:space="preserve">
    <value>Show guides adjacent to text</value>
  </data>
  <data name="VisibleAtTextEndDisplayName" xml:space="preserve">
    <value>Visible at text</value>
  </data>
  <data name="tooltipCustomizeThisContentType" xml:space="preserve">
    <value>Customize this content type</value>
  </data>
  <data name="tooltipNextRelease" xml:space="preserve">
    <value>Planned for a later release</value>
  </data>
  <data name="UnalignedThemeName" xml:space="preserve">
    <value>Unaligned</value>
  </data>
  <data name="ExtendInwardsOnlyDescription" xml:space="preserve">
    <value>Empty lines only show guides where the guides appear both above and below</value>
  </data>
  <data name="ExtendInwardsOnlyDisplayName" xml:space="preserve">
    <value>Only extend inwards</value>
  </data>
  <data name="VisibleAlignedDescription" xml:space="preserve">
    <value>Show guides at all multiples of the indent size, regardless of the surrounding text</value>
  </data>
  <data name="VisibleAlignedDisplayName" xml:space="preserve">
    <value>Show at all indent size multiples</value>
  </data>
  <data name="VisibleEmptyAtEndDescription" xml:space="preserve">
    <value>Show guides on empty lines where the guide on the previous line was adjacent to text</value>
  </data>
  <data name="VisibleEmptyAtEndDisplayName" xml:space="preserve">
    <value>Visible at the end of empty lines</value>
  </data>
  <data name="VisibleEmptyDescription" xml:space="preserve">
    <value>Show guides on empty lines when the same guide was shown on the previous line</value>
  </data>
  <data name="VisibleEmptyDisplayName" xml:space="preserve">
    <value>Visible on empty lines</value>
  </data>
  <data name="VisibleUnalignedDescription" xml:space="preserve">
    <value>Show guides for all indented text, regardless of the indent size setting</value>
  </data>
  <data name="VisibleUnalignedDisplayName" xml:space="preserve">
    <value>Show at unaligned indents</value>
  </data>
  <data name="DefaultFormatName" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="lstModePreset_Custom" xml:space="preserve">
    <value>(Custom)</value>
  </data>
  <data name="lstModePreset_IndentsDown" xml:space="preserve">
    <value>At indents (default)</value>
  </data>
  <data name="lstModePreset_IndentsUp" xml:space="preserve">
    <value>At indents (inverted)</value>
  </data>
  <data name="lstModePreset_Minimal" xml:space="preserve">
    <value>Only at aligned text</value>
  </data>
  <data name="lstModePreset_TextDown" xml:space="preserve">
    <value>Flow down from text</value>
  </data>
  <data name="lstModePreset_TextUp" xml:space="preserve">
    <value>Flow up from text</value>
  </data>
  <data name="CaretFormatName" xml:space="preserve">
    <value>Highlighted</value>
  </data>
  <data name="LineStyle_Dashed" xml:space="preserve">
    <value>Dashed</value>
  </data>
  <data name="LineStyle_DashedThick" xml:space="preserve">
    <value>Dashed (thick)</value>
  </data>
  <data name="LineStyle_Dotted" xml:space="preserve">
    <value>Dotted</value>
  </data>
  <data name="LineStyle_DottedThick" xml:space="preserve">
    <value>Dotted (thick)</value>
  </data>
  <data name="LineStyle_Solid" xml:space="preserve">
    <value>Solid</value>
  </data>
  <data name="LineStyle_Thick" xml:space="preserve">
    <value>Solid (thick)</value>
  </data>
  <data name="UnalignedFormatName" xml:space="preserve">
    <value>Unaligned</value>
  </data>
  <data name="btnThemeReset" xml:space="preserve">
    <value>&amp;Reset</value>
  </data>
  <data name="HighlightColorDescription" xml:space="preserve">
    <value>The color to use when the line is highlighted.</value>
  </data>
  <data name="HighlightColorDisplayName" xml:space="preserve">
    <value>Highlight Color</value>
  </data>
  <data name="HighlightStyleDescription" xml:space="preserve">
    <value>The style to use when the line is highlighted.</value>
  </data>
  <data name="HighlightStyleDisplayName" xml:space="preserve">
    <value>Highlight Style</value>
  </data>
  <data name="LineStyle_DashedGlow" xml:space="preserve">
    <value>Dashed (glow)</value>
  </data>
  <data name="LineStyle_DottedGlow" xml:space="preserve">
    <value>Dotted (glow)</value>
  </data>
  <data name="LineStyle_Glow" xml:space="preserve">
    <value>Solid (glow)</value>
  </data>
  <data name="tabPageAdvanced" xml:space="preserve">
    <value>Advanced</value>
  </data>
  <data name="tabPageQuick" xml:space="preserve">
    <value>Quick Set</value>
  </data>
  <data name="preset1" xml:space="preserve">
    <value>\n\t  Col 7\n\t\tCol 9\n\t\t\tCol 13\n\n\t\t\t Col 14\n\n\t  Col 7\n Col 2\n\n</value>
  </data>
  <data name="preset2" xml:space="preserve">
    <value>\n\t  A\n\t\tB\n\t\t\tC\n\n\t\t\t D\n\n\t  E\n F\n\n</value>
  </data>
  <data name="preset3" xml:space="preserve">
    <value>\n\t  1\n\t\t2\n\t\t\t3\n\n\t\t\t 4\n\n\t  5\n 6\n\n</value>
  </data>
  <data name="preset4" xml:space="preserve">
    <value>\n\t  7th column\n\t\t9th column\n\t\t\t13th col.\n\n\t\t\t 14th col.\n\n\t  7th column\n 2nd column\n\n</value>
  </data>
  <data name="preset5" xml:space="preserve">
    <value>\n\t  Unaligned\n\t\tAligned\n\t\t\tAligned\n\n\t\t\t Unaligned\n\n\t  Unaligned\n Unaligned\n\n</value>
  </data>
  <data name="preset6" xml:space="preserve">
    <value>\n\t  Blorg\n\t\tFrob\n\t\t\tGlob\n\n\t\t\t Resrov\n\n\t  Blob\n Fribble\n\n</value>
  </data>
  <data name="NoDocumentationHtml" xml:space="preserve">
    <value>&lt;p style="font: message-box;"&gt;(No documentation)&lt;/p&gt;</value>
  </data>
  <data name="CaretAdjacentDocumentation" xml:space="preserve">
    <value>&lt;p style="font: message-box;"&gt;Any guide touching the current caret location is highlighted.&lt;/p&gt;</value>
  </data>
  <data name="CaretAdjacentDisplayName" xml:space="preserve">
    <value>Adjacent guides</value>
  </data>
  <data name="CaretNearestLeft2Documentation" xml:space="preserve">
    <value>&lt;p style="font: message-box;"&gt;The rightmost guide for the current line is highlighted.&lt;/p&gt;&lt;p style="font: message-box;"&gt;This works best for languages like C++ or C#.&lt;/p&gt;</value>
  </data>
  <data name="CaretNearestLeft2DisplayName" xml:space="preserve">
    <value>Current line</value>
  </data>
  <data name="CaretNearestLeftDocumentation" xml:space="preserve">
    <value>&lt;p style="font: message-box;"&gt;The rightmost guide for the block containing the current caret location is highlighted.&lt;/p&gt;&lt;p style="font: message-box;"&gt;Blocks are two or more adjacent lines of text.&lt;/p&gt;&lt;p style="font: message-box;"&gt;This works best for languages like C++, C# or Python.&lt;/p&gt;</value>
  </data>
  <data name="CaretNearestLeftDisplayName" xml:space="preserve">
    <value>Current block</value>
  </data>
  <data name="CaretNoneDocumentation" xml:space="preserve">
    <value>&lt;p style="font: message-box;"&gt;Guides are not highlighted as the current caret location changes.&lt;/p&gt;</value>
  </data>
  <data name="CaretNoneDisplayName" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="PageWidthExists" xml:space="preserve">
    <value>A page width marker already exists at that column.</value>
  </data>
  <data name="CaretAboveBelowEndsDisplayName" xml:space="preserve">
    <value>Above or below</value>
  </data>
  <data name="CaretAboveBelowEndsDocumentation" xml:space="preserve">
    <value>&lt;p style="font: message-box;"&gt;Highlights any guide that starts or ends on the lines above or below the current line.&lt;/p&gt;&lt;p style="font: message-box;"&gt;This works best for languages like HTML and XML.&lt;/p&gt;</value>
  </data>
  <data name="PageWidthPositionDescription" xml:space="preserve">
    <value>The column to display the marker after</value>
  </data>
  <data name="PageWidthPositionDisplayName" xml:space="preserve">
    <value>Column</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Indent Guides</value>
  </data>
  <data name="VisibleDisabledDesc" xml:space="preserve">
    <value>Disabled Indent Guide on this content type.</value>
  </data>
  <data name="VisibleDisabledName" xml:space="preserve">
    <value>Disabled</value>
  </data>
</root>